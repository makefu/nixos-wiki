= A cheat sheet and rough mapping between Ubuntu and NixOS =
This is meant to give you basic ideas and get you unstuck. NixOS being very different from most distributions, a deeper understanding will be necessary sooner or later! Follow the links to the manual pages and browse the wiki to find real NixOS tutorials.

The system-wide column is the equivalent of using apt under Ubuntu.

TODO Provide well-commented sample configuration.nix and ~/.nixpkgs/config.nix files with examples of common tasks.

{| class="wikitable"
!|Task
!|Ubuntu
!|NixOS (system-wide and root)
!|NixOS (user) and Nix in general
!|Relevant section of the manual
|-
| colspan="5" style="text-align:center"| Basic concepts
|-
| 
| 
|This column will let you do everything you can with Ubuntu and more.	
|This column just isn't possible in Ubuntu.
| 
|-
|Who can install packages and who can run them?
|All packages are always system-wide and only root can install packages.
|Packages root installs are system-wide. It does so through through /etc/nixos/configuration.nix. If root installs packages the same way users do, through ~/.nixpkgs/config.nix, they are also global. Root's default profile is the system-wide default profile.
|Users can install their own packages and have their own profiles (environments) through ~/.nixpkgs/config.nix
|[https://nixos.org/nixos/manual/index.html#sec-package-management Package management]

|-
|Package manager
|apt which is really running on top of dpkg, sometimes wrapped by UIs like aptitude.
|nix, but many system-wide operations are provided by nixos packages.
|Just nix without the involvement of nixos.
|
|-
|How do you select your official sources and major releases
|These are baked into the distribution (e.g. Ubuntu version X). Upgrades are hard and permanent.
|At any time you select from a collection of channels. They're system-wide when set by root. You can roll back changes or switch channels with ease.
|Channels are per-user if they're not set by root.
|
|-
|Where are packages installed?
|apt installs globally into /bin/, /usr/, etc.	
|System-wide packages are in /run/current-system/sw/ (these are installed because of /etc/nixos/configuration.nix) and /nix/var/nix/profiles/default/bin/ (this is the profile managed by root). Note that the files are just symlinks to the real packages managed by nix /nix/store/.
|User packages are in ~/.nix-profile/. Note that the files are just symlinks to the real packages managed by nix in /nix/store/.
|
|-
|When changes take effect
|As soon as the command runs. Commands are not atomic and can leave your machine in a bad state.
|Most of the time you modify the configuration file and apply changes with nixos-rebuild switch
TODO How does one get nixos to do all the work for a switch and separate out the actual switching from fetching/building?
|Most of the time you apply changes with nix-env -i all
TODO How does one get nix to do all the work for a switch and separate out the actual switching from fetching/building?
|
|-
|Packages
|Uniformly referred to as packages
|Technically called "derivations" but everyone calls them packages.
|Technically called "derivations" but everyone calls them packages.
|
|-
| colspan="5" style="text-align:center"| Package management
|-
|Install a package
|<pre>sudo apt-get install emacs</pre>
|In /etc/nixos/configuration.nix:
If it's a program add to systemPackages:
<pre>
 systemPackages = with pkgs; 
                    [ <other packages...> emacs ];</pre>
If it's a service add:

<pre>services.openssh.enable = true;</pre>
|<pre>nix-env -i emacs</pre>
Or with collections, add the package to your ~/.nixpkgs/config.nix and run
<pre>nix-env -i all</pre>
|
|-
|Uninstall a package
|<pre>sudo apt-get remove emacs</pre>
|remove from /etc/nixos/configuration.nix
<pre>sudo nixos-rebuild switch</pre>
|
|
|-
|Uninstall a package removing its configuration
|<pre>apt-get purge emacs</pre>
|All configuration is in configuration.nix
|
|
|-
|Update the list of packages
|<pre>sudo apt-get update</pre>
|<pre>sudo nix-channel --update</pre>
|<pre>nix-channel --update</pre>
|
|-
|Upgrade packages
|<pre>sudo apt-get upgrade</pre>
|<pre>sudo nixos-rebuild switch</pre>
|<pre>nix-env -u</pre>
|
|-
|Check for broken dependencies
|<pre>sudo apt-get check</pre>
|<pre>nix-store --verify --check-contents</pre>
|unneeded!
|
|-
|List package dependencies
|<pre>apt-cache depends emacs</pre>
|<pre>nix-store --query --requisites $(readlink -f /run/current-system)
nix-store -q --tree /nix/var/nix/profiles/system</pre>
|<pre>nix-store --query --references\
  $(nix-instantiate '<nixpkgs>' -A emacs)</pre>
For installed packages:
<pre>nix-store --query --references $(which emacs)</pre>
|
|-
|List which packages depend on this one (reverse dependencies)
|<pre>apt-cache rdepends emacs</pre>
|
|For installed packages (only print reverse dependencies *which are already installed*):
<pre>nix-store --query --referrers $(which emacs)</pre>
|
|-
|Verify all installed packages
|<pre>debsums</pre>
|<pre>sudo nix-store --verify --check-contents</pre>
|<pre>nix-store --verify --check-contents</pre>
|
|-
|Fix packages with failed checksums
|Reinstall broken packages
|<pre>sudo nix-store --verify --check-contents --repair</pre>
|<pre>nix-store --verify --check-contents --repair</pre>
|
|-
|Select major version and stable/unstable
|Change sources.list and apt-get dist-upgrade. A an extremely infrequent and destructive operation. The nix variants are safe and easy to use.
|<pre>nix-channel --add\
   https://nixos.org/channels/nixpkgs-unstable <name></pre>
Add the unstable channel. At that address you will find names for other versions and variants. Name can be any string.
<pre>nix-channel --remove <name></pre>
To eliminate a channel.
<pre>nix-channel --list</pre>
To show all installed channel.
|When run by a user channels work locally, when run by root they're used as the system-wide channels.
|
|-
|Private package repository
|PPA
|Define your package tree as in the general column, and include it in configuration.nix, then list your packages in systemPackages to make them available system wide
|See [https://sandervanderburg.blogspot.de/2014/07/managing-private-nix-packages-outside.html]
|
|-
|Install a particular version of a package
|
|
|
|
|-
| colspan="5" style="text-align:center"| Package configuration
|-
|Configure a package
|<pre>sudo dpkg-reconfigure <package></pre>
|edit /etc/nixos/configuration.nix
|edit ~/.nixpkgs/config.nix TODO More details about how to edit
|
|-
|List package options
|
|
|
|
|-
|Global package configuration
|Modify configuration file in /etc/
|
|
|
|-
| colspan="5" style="text-align:center"| Package configuration
|-
|Find packages
|<pre>apt-cache search emacs</pre>
|<pre>nix-env -qaP '.*emacs.*'</pre>
|<pre>nix-env -qaP '.*emacs.*'</pre>
|
|-
|Show package description
|<pre>apt-cache show emacs</pre>
|<pre>nix-env -qa --description '.*emacs.*'</pre>
|<pre>nix-env -qa --description '.*emacs.*'</pre>
|
|-
|Show files installed by package
|<pre>dpkg -L emacs</pre>
|<pre>readlink -f $(which emacs)
 /nix/store/ji06y4haijly0i0knmr986l2dajffv1p-emacs-24.4/bin/emacs-24.4</pre>
then
<pre>du -a /nix/store/ji06y4haijly0i0knmr986l2dajffv1p-emacs-24.4</pre>
|<pre></pre>
|
|-
|Show package for file
|<pre>dpkg -S /usr/bin/emacs</pre>
|follow the symlink
|follow the symlink
|
|-
| colspan="5" style="text-align:center"| Services
|-
|Start a service
|<pre>sudo service apache start</pre>
|<pre>sudo systemctl start apache</pre>
|
|
|-
|Stop a service
|<pre>sudo service apache stop</pre>
|<pre>sudo systemctl stop apache</pre>
|
|
|-
|Where your log files live
|/var/log/
|System-wide packages /var/log/
|User packages ~/.nix-profile/var/log/
|
|-
|Adding a user
|sudo adduser alice
|Add <pre>users.extraUsers.alice =
 { isNormalUser = true;
   home = "/home/alice";
   description = "Alice Foobar";
   extraGroups = [ "wheel" "networkmanager" ];
   openssh.authorizedKeys.keys =
      [ "ssh-dss AAAAB3Nza... alice@foobar" ];
 };</pre> to to /etc/nixos/configuration.nix and then call <pre>nixos-rebuild switch</pre>
|
|
|-
| colspan="5" style="text-align:center"| Misc tasks
|-
|List binaries
|<pre>ls /usr/bin/</pre>
|<pre>ls /run/current-system/sw/bin &&\
ls /nix/var/nix/profiles/default/bin/</pre>
|<pre>ls ~/.nix-profile/bin</pre>
|
|-
|Get the current version number
|<pre>cat /etc/debian_version</pre>
|<pre>nixos-version</pre>
|<pre>nixos-version</pre>
|
|-
|Get sources for a package
|<pre>apt-get source emacs</pre>
|
|In Debian, apt-get source gets both the patched upstream source and the recipe for the package. Those need two steps in Nix.

To find the package recipe: <pre>grep -r emacs $(nix-instantiate --eval --expr '<nixpkgs>')</pre>
To download the source as specified by the package recipe: <pre>nix-build '<nixpkgs>' -A emacs.src</pre>
The patched source is usually not a derivation itself, but can be produced for most packages with the following command: <pre>nix-shell '<nixpkgs>' -A emacs\
   --command 'unpackPhase; patchPhase'</pre>
|
|-
|Compile & install a package from source
|
|
|<pre>git clone foobar
cat >default.nix <<EOF
with import <nixpkgs> { };
stdenv.lib.overrideDerivation foobar (oldAttrs : {
  src = ./foobar;
})
EOF
nix-build</pre>
|
|-
|Install a binary package
|
|
|
|
|-
|Install a .deb
|<pre>dpkg -i package.deb</pre>
|
|Install dpkg with Nix, then <pre>dpkg -i package.deb</pre>
|
|}
