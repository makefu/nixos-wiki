== motivation ==
creating a modified NIXOS live CD out of a working nixos installation gives you the benefits:
* verify what is included
* no need to download it
* it is easy to add your own programs to the image

== how to build such an image ==
we will use the NIXREPOS variable, which points to the nixpkgs/nixos checkouts, see [[Create and debug nix packages]]

just run this command (for 64 bit):
 export NIX_PATH=$NIXREPOS
 nix-build -A iso_graphical.x86_64-linux $NIXREPOS/nixos/release.nix

for 32 bit:
 export NIX_PATH=$NIXREPOS
 nix-build -A iso_graphical.i686-linux $NIXREPOS/nixos/release.nix
 
once the building process is over, you should see multiple nix distributions built (for multiple archs). See contents to find iso image path:

 $ cat /nix/store/2y4bivmrzg4d2dgby2b7prvfj7445088-nixos-iso-0.1pre1234/nix-support/hydra-build-products 
 file iso /nix/store/94rrfklbk2hcqhkr4627vsrlprlyva50-iso9660-image/iso/nixos-minimal-0.1pre1234-i686-linux-test.iso

and copy the new image from there to your USB drive (or use unetbootin).

== adding additional software to the image ==
the basic script '''/etc/nixos/nixos/release.nix''' contains several entry points for custom images. as we are using '''-A iso_minimal''' have a look at: iso_minimal which will redirect us to:

* ./modules/installer/cd-dvd/installation-cd-minimal.nix -> /etc/nixos/nixos/modules/installer/cd-dvd/installation-cd-minimal.nix
 # This module defines a small NixOS installation CD.  It does not
 # contain any graphical stuff.
 {config, pkgs, ...}:
 {
   require = [
     ./installation-cd-base.nix
     ../../profiles/minimal.nix
   ];
 }

=== step 1/3: starting ssh automatically in the image and adding a ssh key to it ===
setting a default password on the boot cdrom (so that nobody can login using the default 'unset' password:
TODO

=== step 2/3: starting ssh automatically in the image and adding a ssh key to it ===
this is a hack, however it surely gives you an idea how to modify the stuff there:

in '''/etc/nixos/nixos/modules/installer/cd-dvd/installation-cd-base.nix''' add:
        mkdir -p /root/.ssh/
        echo 'ssh-rsa ssh-rsa  AAAAB3Nz...(cut here)...AzV foo@bar' > /root/.ssh/authorized_keys
at the end of 
* boot.postBootCommands =

=== step 3/3: starting ssh automatically in the image and adding a ssh key to it ===
'''THIS IS NOT WORKING YET: IGNORE LINES BELOW'''
 vi /etc/nixos/nixos/modules/installer/cd-dvd/system-tarball-pc.nix
comment this line with a leading '#':
 jobs.openssh.startOn = "network interfaces started";

== software installation inside the 'once' deployed and booted image ==
in case you have booted from your image you can add software as described here:
* [[install/remove software]]

<del>Without NixOS you need to supply the [https://svn.nixos.org/repos/nix/nixos/trunk/ source] instead of /etc/nixos/nixos.</del>(SVN is dead, https://github.com/NixOS/nixpkgs ? )

== references ==
* See also section "Building your own NixOS CD" of the [https://nixos.org/nixos/manual/index.html#sec-building-cd NixOS manual].

[[Category:NixOS]]
[[Category:Installation]]
[[Category:Deployment]]
